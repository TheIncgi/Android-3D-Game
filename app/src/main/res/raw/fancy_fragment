precision highp float;
precision highp int;

uniform mat4 modelMatrix;

uniform vec3 cameraPosition;
uniform float time;


uniform vec3 lightColor;
uniform float lightBrightness;
uniform vec3 lightPosition;

uniform vec3 diffuseColor;
uniform float opacity;

uniform float globalIlluminationBrightness;

uniform int textureMode;
uniform sampler2D colorMap;
uniform sampler2D normalMap;
uniform float normalStrength;

varying vec3 vPosition;
varying vec3 vNormal;
varying vec2 vUv;
//arying vec2 vUv2;

vec3 toHSV( vec3 color );
vec3 fromHSV( vec3 color );
vec4 toHSV( vec4 color );
vec4 fromHSV( vec4 color );

//0 no texture
//1 texture
//2 noraml
//3 texture + normal

//https://math.stackexchange.com/questions/13261/how-to-get-a-reflection-vector

void main() {

    vec3 worldPosition = ( modelMatrix * vec4( vPosition, 1.0 )).xyz;

    vec3 worldNormal = normalize( vec3( modelMatrix * vec4( vNormal, 0.0 ) ) );
    vec3 cameraNormal = cameraPosition - worldPosition;

    if( textureMode == 2 || textureMode == 3){
        vec3 texNorm = normalStrength * texture2D(normalMap, vUv).rgb;
        texNorm -= 0.5;
        texNorm = faceforward( texNorm, -cameraNormal, worldNormal );
        worldNormal += texNorm;
    }

    vec3 lightVector = normalize( lightPosition - worldPosition );
    vec3 lightReflect = reflect( lightVector, worldNormal );

    float brightness = dot( worldNormal, lightVector ) * lightBrightness;
    float specular = clamp(-dot(cameraNormal, lightReflect), 0.0, 1.0);
    brightness *= 1.0+specular;
    brightness += globalIlluminationBrightness;


    vec3 sample = vec3(1.0, 1.0, 1.0);
     if( textureMode == 1 || textureMode == 3 ){
         sample = texture2D(colorMap, vUv).rgb;
     }else{
         sample = vec3(.9999999, 1.0, 1.0);
     }
    sample *= diffuseColor;
    sample *= lightColor;
    vec3 light = toHSV( sample );
    light.y *= min(1.0, 1.0/brightness); //saturation
    light.z *= brightness;

    light = fromHSV( light );


    gl_FragColor = vec4( light, 1.0 ); //* mat color

}

//https://www.rapidtables.com/convert/color/rgb-to-hsv.html
vec4 toHSV( vec4 color ){
    float cMax = max(color.r, max(color.g, color.b));
    float cMin = min(color.r, min(color.g, color.b));
    float delta = cMax - cMin;
    vec4 result;
    if( cMax == 0.0 ){
        result.x = 0.0;
    }else if( cMax == color.r ){
        result.x = 60.0 * mod( ((color.g-color.b)/delta),  6.0);
    }else if( cMax == color.g ){
        result.x = 60.0 * (((color.b-color.r)/delta)+2.0);
    }else if( cMax == color.b ){
        result.x = 60.0 * (((color.r-color.g)/delta)+4.0);
    }

    if( cMax == 0.0 ){
        result.y = 0.0;
    }else{
        result.y = delta / cMax;
    }

    result.z = cMax;
    result.w = color.w;

    return result;
}

//https://www.rapidtables.com/convert/color/hsv-to-rgb.html
vec4 fromHSV( vec4 color ){
    float H = mod(color.x, 360.0);
    float S = clamp(color.y, 0.0, 1.0);
    float V = clamp(color.z, 0.0, 1.0);
    float alpha = color.w;

    vec4 result;
    float c = V*S;
    float x = c * ( 1.0- abs( mod(H / 60.0, 2.0 ) - 1.0) );
    float m = V - c;

    if( 0.0 <= color.x && color.x < 60.0 ) {
        result = vec4( c, x, 0.0, alpha );
    }else if( color.x < 120.0 ) {
        result = vec4( x, c, 0.0, alpha );
    }else if( color.x < 180.0 ){
        result = vec4( 0.0, c, x, alpha );
    }else if( color.x < 240.0) {
        result = vec4( 0.0, x, c, alpha );
    }else if( color.x < 300.0 ){
        result = vec4( x, 0.0, c, alpha );
    }else{
        result = vec4( c, 0.0, x, alpha );
    }
    result += m;

    return result;
}
vec3 toHSV( vec3 color ){
    float cMax = max(color.r, max(color.g, color.b));
    float cMin = min(color.r, min(color.g, color.b));
    float delta = cMax - cMin;
    vec3 result;
    if( cMax == 0.0 ){
        result.x = 0.0;
    }else if( cMax == color.r ){
        result.x = 60.0 * mod( ((color.g-color.b)/delta),  6.0);
    }else if( cMax == color.g ){
        result.x = 60.0 * (((color.b-color.r)/delta)+2.0);
    }else if( cMax == color.b ){
        result.x = 60.0 * (((color.r-color.g)/delta)+4.0);
    }

    if( cMax == 0.0 ){
        result.y = 0.0;
    }else{
        result.y = delta / cMax;
    }

    result.z = cMax;

    return result;
}

//https://www.rapidtables.com/convert/color/hsv-to-rgb.html
vec3 fromHSV( vec3 color ){
    float H = mod(color.x, 360.0);
    float S = clamp(color.y, 0.0, 1.0);
    float V = clamp(color.z, 0.0, 1.0);

    vec3 result;
    float c = V*S;
    float x = c * ( 1.0- abs( mod(H / 60.0, 2.0 ) - 1.0) );
    float m = V - c;

    if( 0.0 <= color.x && color.x < 60.0 ) {
        result = vec3( c, x, 0.0 );
    }else if( color.x < 120.0 ) {
        result = vec3( x, c, 0.0 );
    }else if( color.x < 180.0 ){
        result = vec3( 0.0, c, x );
    }else if( color.x < 240.0) {
        result = vec3( 0.0, x, c );
    }else if( color.x < 300.0 ){
        result = vec3( x, 0.0, c );
    }else{
        result = vec3( c, 0.0, x );
    }
    result += m;
    return result;
}